package Project;

import java.sql.*;
import java.util.Scanner;

public class Freelancer {

    private Connection conn;
    private Scanner sc = new Scanner(System.in);

    // ---------------- DATABASE CONNECTION ----------------
    public Freelancer() {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            conn = DriverManager.getConnection(
                    "jdbc:oracle:thin:@MechaNova:1521:XE", // Change as needed
                    "sundar",                             // Username
                    "kit"                                 // Password
            );
            System.out.println("Database connected successfully!");
        } catch (Exception e) {
            System.out.println("Failed to connect to database.");
            e.printStackTrace();
        }
    }

    // -------------------- CLIENT METHODS --------------------
    public void addClient() {
        try {
            System.out.print("Enter Client ID: ");
            int id = sc.nextInt(); sc.nextLine();
            System.out.print("Enter Client Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Email: ");
            String email = sc.nextLine();
            System.out.print("Enter Contact No: ");
            String contact = sc.nextLine();

            String sql = "INSERT INTO clients (CLIENT_ID, CLIENT_NAME, EMAIL, CONTACT_NO) VALUES (?,?,?,?)";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, id);
            ps.setString(2, name);
            ps.setString(3, email);
            ps.setString(4, contact);

            int rows = ps.executeUpdate();
            System.out.println(rows > 0 ? "Client added successfully!" : "Failed to add client.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void viewClients() {
        try {
            String sql = "SELECT * FROM clients";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("CLIENT_ID") +
                        ", Name: " + rs.getString("CLIENT_NAME") +
                        ", Email: " + rs.getString("EMAIL") +
                        ", Contact: " + rs.getString("CONTACT_NO"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateClient() {
        try {
            System.out.print("Enter Client ID to update: ");
            int id = sc.nextInt(); sc.nextLine();
            System.out.print("Enter new Client Name: ");
            String name = sc.nextLine();

            String sql = "UPDATE clients SET CLIENT_NAME = ? WHERE CLIENT_ID = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, name);
            ps.setInt(2, id);

            int rows = ps.executeUpdate();
            System.out.println(rows > 0 ? "Client updated!" : "Client not found.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deleteClient() {
        try {
            System.out.print("Enter Client ID to delete: ");
            int id = sc.nextInt();
            String sql = "DELETE FROM clients WHERE CLIENT_ID = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, id);
            int rows = ps.executeUpdate();
            System.out.println(rows > 0 ? "Client deleted." : "Client not found.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // -------------------- PROJECT METHODS --------------------
    public void addProject() {
        try {
            System.out.print("Enter Project ID: ");
            int id = sc.nextInt(); sc.nextLine();
            System.out.print("Enter Project Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Client ID: ");
            int clientId = sc.nextInt(); sc.nextLine();
            System.out.print("Enter Start Date (YYYY-MM-DD): ");
            String startDate = sc.nextLine();
            System.out.print("Enter End Date (YYYY-MM-DD): ");
            String endDate = sc.nextLine();
            System.out.print("Enter Status: ");
            String status = sc.nextLine();
            System.out.print("Enter Description: ");
            String desc = sc.nextLine();

            String sql = "INSERT INTO projects (PROJECT_ID, PROJECT_NAME, CLIENT_ID, START_DATE, END_DATE, STATUS, DESCRIPTION) " +
                    "VALUES (?, ?, ?, TO_DATE(?, 'YYYY-MM-DD'), TO_DATE(?, 'YYYY-MM-DD'), ?, ?)";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, id);
            ps.setString(2, name);
            ps.setInt(3, clientId);
            ps.setString(4, startDate);
            ps.setString(5, endDate);
            ps.setString(6, status);
            ps.setString(7, desc);

            int rows = ps.executeUpdate();
            System.out.println(rows > 0 ? "Project added successfully!" : "Failed to add project.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void viewProjects() {
        try {
            String sql = "SELECT * FROM projects";
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("PROJECT_ID") +
                        ", Name: " + rs.getString("PROJECT_NAME") +
                        ", Client ID: " + rs.getInt("CLIENT_ID") +
                        ", Start: " + rs.getDate("START_DATE") +
                        ", End: " + rs.getDate("END_DATE") +
                        ", Status: " + rs.getString("STATUS") +
                        ", Desc: " + rs.getString("DESCRIPTION"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void updateProject() {
        try {
            System.out.print("Enter Project ID to update: ");
            int id = sc.nextInt(); sc.nextLine();
            System.out.print("Enter new Project Status: ");
            String status = sc.nextLine();

            String sql = "UPDATE projects SET STATUS = ? WHERE PROJECT_ID = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, status);
            ps.setInt(2, id);

            int rows = ps.executeUpdate();
            System.out.println(rows > 0 ? "Project updated!" : "Project not found.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deleteProject() {
        try {
            System.out.print("Enter Project ID to delete: ");
            int id = sc.nextInt();
            String sql = "DELETE FROM projects WHERE PROJECT_ID = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, id);
            int rows = ps.executeUpdate();
            System.out.println(rows > 0 ? "Project deleted." : "Project not found.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // -------------------- MENU --------------------
    public void showMenu() {
        while (true) {
            System.out.println("\n--- Freelancer Project Tracker ---");
            System.out.println("1. Add Client");
            System.out.println("2. View Clients");
            System.out.println("3. Update Client");
            System.out.println("4. Delete Client");
            System.out.println("5. Add Project");
            System.out.println("6. View Projects");
            System.out.println("7. Update Project");
            System.out.println("8. Delete Project");
            System.out.println("9. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1: addClient(); break;
                case 2: viewClients(); break;
                case 3: updateClient(); break;
                case 4: deleteClient(); break;
                case 5: addProject(); break;
                case 6: viewProjects(); break;
                case 7: updateProject(); break;
                case 8: deleteProject(); break;
                case 9: 
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }

    // -------------------- MAIN --------------------
    public static void main(String[] args) {
        Freelancer app = new Freelancer();
        app.showMenu();
    }
}
